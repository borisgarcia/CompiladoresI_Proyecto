input -> stmt_list

stmt_list -> declar stmt_list
stmt_list -> ''

p_stmt_list -> ++ ;
p_stmt_list -> -- ;
p_stmt_list -> = expr p_stmt_list_2 ;
p_stmt_list -> ( ) ;
p_stmt_list_2 -> ''
p_stmt_list_2 -> ( ) ;

declar -> VOID IDENT ( parametros ) void_fn
void_fn -> ;
void_fn -> { p_statement }

declar -> type IDENT array p_declar

p_declar -> declarfn
p_declar -> declarvar ;

declarvar -> , pointer IDENT array declarvar
declarvar -> value declarvar
declarvar -> ''

value -> = expr
value -> { p_value }

p_value -> expr p_value_2
p_value_2 -> , p_value
p_value_2 -> ''

declarfn -> ( parametros ) p_declarfn

p_declarfn -> ;
p_declarfn -> { p_statement return }

return -> RETURN expr ;
return -> ''

pointer -> *
pointer -> ''
array -> [ size ]
array -> ''
size -> NUMBER
size -> ''


parametros -> type IDENT p_parametros
parametros -> ''
p_parametros -> , parametros
p_parametros -> ''

whilestmt -> WHILE ( condicion ) statement

forstmt -> FOR ( fordeclar ; condicion ; forassign ) statement
fordeclar -> type IDENT = expr
fordeclar -> IDENT = expr
fordeclar -> ''
forassign -> op IDENT op assignOP

ifstmt -> IF ( condicion ) statement elsestmt
elsestmt -> ELSE statement
elsestmt -> ELSEIF ( condicion ) statement elsestmt
elsestmt -> ''

statement -> { p_statement }

p_statement -> forstmt p_statement
p_statement -> type IDENT array declarvar ; p_statement
p_statement -> whilestmt p_statement
p_statement -> ifstmt p_statement
p_statement -> printf ( ) ; p_statement
p_statement -> IDENT p_stmt_list p_statement
p_statement -> IDENT ++ ; p_statement
p_statement -> IDENT -- ; p_statement
p_statement -> scanf ; p_statement
p_statement -> ''

assignOP -> = expr
assignOP -> ''

op -> ++
op -> --
op -> ''

condicion -> not expr opcondi not expr p_condicion

p_condicion -> && condicion
p_condicion -> || condicion
p_condicion -> ''

opcondi -> ==
opcondi -> > 
opcondi -> <
opcondi -> !=
opcondi -> <=
opcondi -> >=

not -> !
not -> ''

type -> INT
type -> CHAR
type -> BOOLEAN

expr -> term p_expr
p_expr -> + term p_expr
p_expr -> - term p_expr
p_expr -> ''

term -> factor p_term
p_term -> * factor p_term
p_term -> / factor p_term
p_term -> ''

factor -> IDENT
factor -> NUMBER
factor -> TRUE
factor -> FALSE
factor -> CADENA
factor -> LETRA
factor -> ( expr )