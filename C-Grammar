input -> function

var -> data_type IDENT

data_type -> INT
data_type -> CHAR
data_type -> BOOLEAN

fn_type -> VOID
fn_type -> INT
fn_type -> CHAR
fn_type -> BOOLEAN

p_function -> function
p_function -> ''

function -> param fn_type IDENT ( param ) body

param -> data_type IDENT p_param
p_param -> , param

body -> { statement }

statement -> IF ( paren_expr ) block statement
statement -> WHILE ( paren_expr ) block statement
statement -> ''

block -> { block statement } block
block -> expr ; block
block -> ''

paren_expr -> factor condicion factor p_paren_expr

p_paren_expr -> || paren_expr
p_paren_expr -> && paren_expr
p_paren_expr -> ''

condicion -> ==
condicion -> > 
condicion -> <
condicion -> !=
condicion -> <=
condicion -> >=

expr -> term p_expr
p_expr -> + term p_expr
p_expr -> - term p_expr
p_expr -> ''

term -> factor p_term
p_term -> * factor p_term
p_term -> / factor p_term
p_term -> ''

factor -> IDENT
factor -> NUMBER
factor -> ( expr )




FOR ( INT IDENT = IDENT ; IDENT == IDENT || IDENT != NUMBER ; IDENT += NUMBER + IDENT + NUMBER * IDENT )